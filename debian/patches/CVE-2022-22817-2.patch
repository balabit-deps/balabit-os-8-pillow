Backport of:

From dd46100bdc7fbb6c2fb71008a49c40f081eb0c7c Mon Sep 17 00:00:00 2001
From: Andrew Murray <radarhere@users.noreply.github.com>
Date: Mon, 10 Jan 2022 21:49:55 +1100
Subject: [PATCH] Restrict builtins within lambdas for ImageMath.eval

---
 Tests/test_imagemath.py | 12 ++++++++++--
 src/PIL/ImageMath.py    | 15 +++++++++++----
 2 files changed, 21 insertions(+), 6 deletions(-)

--- a/Tests/test_imagemath.py
+++ b/Tests/test_imagemath.py
@@ -56,9 +56,17 @@ class TestImageMath(PillowTestCase):
             pixel(ImageMath.eval("float(B)**33", images)), "F 8589934592.0"
         )
 
-    def test_prevent_exec():
+    @pytest.mark.parametrize(
+        "expression",
+        (
+            "exec('pass')",
+            "(lambda: exec('pass'))()",
+            "(lambda: (lambda: exec('pass'))())()",
+        ),
+    )
+    def test_prevent_exec(expression):
         with pytest.raises(ValueError):
-            ImageMath.eval("exec('pass')")
+            ImageMath.eval(expression)
 
     def test_logical(self):
         self.assertEqual(pixel(ImageMath.eval("not A", images)), 0)
--- a/src/PIL/ImageMath.py
+++ b/src/PIL/ImageMath.py
@@ -246,11 +246,18 @@ def eval(expression, _dict={}, **kw):
         if hasattr(v, "im"):
             args[k] = _Operand(v)
 
-    code = compile(expression, "<string>", "eval")
-    for name in code.co_names:
-        if name not in args and name != "abs":
-            raise ValueError(f"'{name}' not allowed")
+    compiled_code = compile(expression, "<string>", "eval")
 
+    def scan(code):
+        for const in code.co_consts:
+            if type(const) == type(compiled_code):
+                scan(const)
+
+        for name in code.co_names:
+            if name not in args and name != "abs":
+                raise ValueError(f"'{name}' not allowed")
+
+    scan(compiled_code)
     out = builtins.eval(expression, {"__builtins": {"abs": abs}}, args)
     try:
         return out.im
